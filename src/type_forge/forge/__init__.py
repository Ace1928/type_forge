"""Type Forge: Advanced type manipulation and verification system.

This module initializes the forge submodule of the type_forge package,
providing a comprehensive toolkit for type operations with mathematical precision.

The forge module offers capabilities for:
    * Type creation - Generate new types with precise constraints
    * Type validation - Verify values against type specifications
    * Type transformation - Convert between compatible types
    * Type introspection - Analyze type structures recursively
    * Type normalization - Standardize type representations
    * Type mapping - Apply transformations across type hierarchies
    * Type naming - Generate consistent, readable type identifiers
    * Type deduplication - Eliminate redundant type definitions
    * Type verification - Ensure type structure integrity
    * Type standardization - Convert types to canonical forms

Examples:
    Basic type validation::

        >>> from type_forge.forge import validate_type
        >>> result = validate_type(42, int)
        >>> assert result.valid

    Type conversion with verification::

        >>> from type_forge.forge import convert_type
        >>> converted = convert_type("42", int)
        >>> assert converted == 42

    Creating composite types::

        >>> from type_forge.forge import composite_type
        >>> OptionalInt = composite_type([int, type(None)])
        >>> assert is_type_of(None, OptionalInt)

    Analyzing type structure::

        >>> from type_forge.forge import inspect_type
        >>> type_info = inspect_type(dict[str, list[int]])
        >>> assert type_info.structure.component_types[1].component_types[0] == int

Notes:
    All functionality follows Eidosian principles of precision,
    recursive optimization, and perfect integration. The system
    maintains type safety at all abstraction levels while providing
    flexibility through well-defined transformation paths.

Attributes:
    __version__ (str): Version number following semantic versioning.
    __author__ (str): Package author and maintainer details.

See Also:
    - :mod:`type_forge.core`: Core type system components
    - :mod:`type_forge.typing`: Extended typing utilities
    - :mod:`type_forge.validators`: Validation framework
"""

from __future__ import annotations

from typing import TypeVar

# Comprehensive imports from type_forge.typing for centralized type management
from type_forge.typing import (
    CollectionT,
    CollectionTypes,
    ComparableT,
    ComparableT_co,
    ComparableT_contra,
    CompositeValidator,
    ConversionResult,
    ConverterMap,
    ConverterMapGeneric,
    ConverterMapSR,
    ConverterPriority,
    DictKV,
    DictKV_co,
    DictSchemaT,
    DictSchemaT_co,
    DictSchemaT_contra,
    ErrorHandler,
    ErrorMessage,
    FallbackProvider,
    FieldDefinitions,
    FieldDefinitionsT,
    FieldDefinitionsT_co,
    FieldDefinitionsT_contra,
    FieldsWithDefaults,
    FieldsWithDefaultsT,
    FrozenSetT,
    FrozenSetT_co,
    HashableT,
    HashableT_co,
    HashableT_contra,
    IterableT,
    IterableT_co,
    IteratorT,
    IteratorT_co,
    K,
    K_co,
    K_contra,
    ListSchemaT,
    ListT,
    ListT_co,
    MappingTypes,
    NumericTypes,
    OptionalConverter,
    ParentSpecType,
    ParentSpecType_co,
    ParentSpecType_contra,
    PathSegmentT,
    PathT,
    PredicateFunc,
    PredicateFunc_contra,
    PrimitiveTypes,
    R,
    R_co,
    R_contra,
    S,
    S_co,
    S_contra,
    SchemaNodeT,
    SchemaSequenceT,
    SchemaTypeMappingT,
    SchemaTypeT,
    SchemaTypeT_co,
    SchemaTypeT_contra,
    SchemaValueNodeT,
    SchemaValueT,
    SchemaValueT_co,
    SchemaValueT_contra,
    SequenceT,
    SequenceT_co,
    SequenceTypes,
    SetT,
    SetT_co,
    SetTypes,
    SingleTypeT,
    SupportsBoolConversion,
    SupportsComparison,
    SupportsEquality,
    SupportsFloat,
    SupportsFloatConversion,
    SupportsGetAttr,
    SupportsGetItem,
    SupportsInt,
    SupportsIntConversion,
    SupportsIteration,
    SupportsLen,
    SupportsLength,
    SupportsMapping,
    SupportsStrConversion,
    SupportsTypeCheck,
    T,
    T_co,
    T_contra,
    TCallable,
    TCallable_co,
    TCallable_contra,
    TCollection,
    TCollection_co,
    TCollection_contra,
    TError,
    TError_co,
    TError_contra,
    TInstance,
    TInstance_co,
    TInstance_contra,
    TransformFunc,
    TransformFunc_co_contra,
    TryResult,
    TupleT,
    TupleT_co,
    TValue,
    TValue_co,
    TValue_contra,
    TypeCategory,
    TypeCompatibility,
    TypeConverter,
    TypeConverterProtocol,
    TypeConverterSafe,
    TypedConverter,
    TypeDeduplicator,
    TypeDistance,
    TypeFactory,
    TypeForgeProtocol,
    TypeGuardFunc,
    TypeGuardFuncT,
    TypeHierarchy,
    TypeIdentifier,
    TypeInfo,
    TypeMap,
    TypeMapFrom,
    TypeMapSR,
    TypeMapTo,
    TypeMatch,
    TypeName,
    TypeNormalizer,
    TypePath,
    TypePrecedence,
    TypeRegistry,
    TypeRegistryProtocol,
    TypeRegistryT,
    TypeRegistryT_co,
    TypeRegistryT_contra,
    TypeRelationship,
    TypeRelationshipAnalyzer,
    TypeStandardizer,
    U,
    U_co,
    U_contra,
    UnionTypeT,
    V,
    V_co,
    V_contra,
    ValidationContext,
    ValidationFunc,
    ValidationFuncT,
    ValidationFuncT_contra,
    ValidationIssue,
    ValidationLevel,
    ValidationOptions,
    ValidationPath,
    ValidationReport,
    ValidationResult,
    ValidationResultT,
    ValidationSeverity,
    ValidationStrategy,
    ValidationWithPath,
    Validator,
    __author__,
    __version__,
    coerce_to_type,
    convert_with_fallback,
    deduplicate_types,
    describe_type,
    get_common_supertype,
    get_python_type_for_name,
    get_standardized_type_name,
    get_type_category,
    get_type_hierarchy,
    get_type_name,
    has_attributes,
    is_abstract_type,
    is_callable,
    is_collection,
    is_compatible_with_type,
    is_function,
    is_generic_type,
    is_instance_of_any,
    is_method,
    is_non_empty_string,
    is_numeric,
    is_primitive_type,
    is_protocol_instance,
    is_subclass_safe,
    is_valid_identifier,
    safe_bool_convert,
    safe_float_convert,
    safe_int_convert,
    safe_str_convert,
    standardize_type_name,
    try_convert,
)

# Public API with precise categorization and documentation
__all__: list[str] = [
    # Type aliases
    "CollectionTypes",
    "ConverterMap",
    "ConverterMapGeneric",
    "ConverterMapSR",
    "ConverterPriority",
    "DictKV",
    "DictKV_co",
    "DictSchemaT",
    "ErrorHandler",
    "ErrorMessage",
    "FallbackProvider",
    "FieldDefinitions",
    "FieldDefinitionsT",
    "FieldDefinitionsT_co",
    "FieldDefinitionsT_contra",
    "FieldsWithDefaults",
    "FieldsWithDefaultsT",
    "FrozenSetT",
    "FrozenSetT_co",
    "IterableT",
    "IterableT_co",
    "IteratorT",
    "IteratorT_co",
    "ListT",
    "ListT_co",
    "MappingTypes",
    "NumericTypes",
    "OptionalConverter",
    "ParentSpecType",
    "ParentSpecType_co",
    "ParentSpecType_contra",
    "PredicateFunc",
    "PredicateFunc_contra",
    "PrimitiveTypes",
    "SchemaTypeT",
    "SchemaTypeT_co",
    "SchemaTypeT_contra",
    "SchemaValueT",
    "SequenceT",
    "SequenceT_co",
    "SequenceTypes",
    "SetT",
    "SetT_co",
    "SetTypes",
    "TransformFunc",
    "TransformFunc_co_contra",
    "TryResult",
    "TupleT",
    "TupleT_co",
    "TypeConverter",
    "TypeConverterSafe",
    "TypeDistance",
    "TypeGuardFunc",
    "TypeGuardFuncT",
    "TypeHierarchy",
    "TypeIdentifier",
    "TypeMap",
    "TypeMapFrom",
    "TypeMapSR",
    "TypeMapTo",
    "TypeMatch",
    "TypeName",
    "TypePath",
    "TypePrecedence",
    "TypeRegistry",
    "TypeRegistryT",
    "TypeRegistryT_co",
    "TypeRegistryT_contra",
    "TypeRelationship",
    "ValidationContext",
    "ValidationFunc",
    "ValidationFuncT",
    "ValidationFuncT_contra",
    "ValidationOptions",
    "ValidationPath",
    "ValidationResult",
    "ValidationResultT",
    "ValidationStrategy",
    "ValidationWithPath",
    "SchemaValueT_co",
    "SchemaValueT_contra",
    "DictSchemaT_co",
    "DictSchemaT_contra",
    # Type analysis
    "TypeRelationshipAnalyzer",
    # Type conversion utilities
    "ConversionResult",
    "coerce_to_type",
    "convert_with_fallback",
    "safe_bool_convert",
    "safe_float_convert",
    "safe_int_convert",
    "safe_str_convert",
    "try_convert",
    # Type definitions and enumerations
    "TypeCategory",
    "TypeCompatibility",
    "ValidationLevel",
    "ValidationSeverity",
    # Type hints
    "CollectionT",
    "ListSchemaT",
    "PathSegmentT",
    "PathT",
    "SchemaNodeT",
    "SchemaSequenceT",
    "SchemaTypeMappingT",
    "SchemaValueNodeT",
    "SchemaValueT",
    "SingleTypeT",
    "UnionTypeT",
    # Type mapping and classification
    "describe_type",
    "get_common_supertype",
    "get_python_type_for_name",
    "get_type_category",
    "get_type_name",
    # Type naming utilities
    "get_standardized_type_name",
    "is_primitive_type",
    # Type protocols and interfaces
    "CompositeValidator",
    "SupportsBoolConversion",
    "SupportsComparison",
    "SupportsEquality",
    "SupportsFloat",
    "SupportsFloatConversion",
    "SupportsGetAttr",
    "SupportsGetItem",
    "SupportsInt",
    "SupportsIntConversion",
    "SupportsIteration",
    "SupportsLen",
    "SupportsLength",
    "SupportsMapping",
    "SupportsStrConversion",
    "SupportsTypeCheck",
    "TypeConverterProtocol",
    "TypeDeduplicator",
    "TypedConverter",
    "TypeFactory",
    "TypeForgeProtocol",
    "TypeInfo",
    "TypeNormalizer",
    "TypeRegistryProtocol",
    "TypeStandardizer",
    "Validator",
    # Type standardization
    "deduplicate_types",
    "get_type_hierarchy",
    "is_abstract_type",
    "is_generic_type",
    "standardize_type_name",
    # Type validation utilities
    "ValidationIssue",
    "ValidationReport",
    "has_attributes",
    "is_callable",
    "is_collection",
    "is_compatible_with_type",
    "is_function",
    "is_instance_of_any",
    "is_method",
    "is_non_empty_string",
    "is_numeric",
    "is_protocol_instance",
    "is_subclass_safe",
    "is_valid_identifier",
    # Type variables with variance annotations
    "ComparableT",
    "ComparableT_co",
    "ComparableT_contra",
    "HashableT",
    "HashableT_co",
    "HashableT_contra",
    "K",
    "K_co",
    "K_contra",
    "R",
    "R_co",
    "R_contra",
    "S",
    "S_co",
    "S_contra",
    "T",
    "TCallable",
    "TCallable_co",
    "TCallable_contra",
    "TCollection",
    "TCollection_co",
    "TCollection_contra",
    "TError",
    "TError_co",
    "TError_contra",
    "TInstance",
    "TInstance_co",
    "TInstance_contra",
    "TValue",
    "TValue_co",
    "TValue_contra",
    "T_co",
    "T_contra",
    "U",
    "U_co",
    "U_contra",
    "V",
    "V_co",
    "V_contra",
    "TypeVar",
    # Version information - Package metadata
    "__version__",  # Package version following semantic versioning
    "__author__",  # Package author and maintainer details
]
